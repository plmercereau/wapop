# TODO Readme on docker hub / ghcr.io
# TODO https://www.blacksmith.sh/blog/building-multi-platform-docker-images-for-arm64-in-github-actions
# TODO https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
# TODO add a cachix token once open-sourced

name: Build and Publish artefacts

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ${{ matrix.os.image }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - image: ubuntu-latest
            platform: linux/amd64
          - image: ubuntu-24.04-arm
            platform: linux/arm64
        # platform:
        #   - linux/amd64
        #   - linux/arm64
        image:
          - name: wapop
            context: .
          - name: network-manager
            context: network-manager
    name: "Build: ${{ matrix.image.name }} (${{ matrix.os.platform }})"
    env:
      DOCKERHUB_REPO: ${{ github.repository_owner }}/${{ matrix.image.name }}
      GHCR_REPO: ghcr.io/${{ github.repository }}/${{ matrix.image.name }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare
        run: |
          platform=${{ matrix.os.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV          

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
            ${{ env.GHCR_REPO }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ${{ matrix.image.context }}
          platforms: ${{ matrix.os.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }},${{ env.GHCR_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests-${{ matrix.image.name }}
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests-${{ matrix.image.name }}/${digest#sha256:}"          

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.image.name }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests-${{ matrix.image.name }}/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - wapop
          - network-manager
    name: "Merge digests: ${{ matrix.image }}"
    needs:
      - build
    env:
      DOCKERHUB_REPO: ${{ github.repository_owner }}/${{ matrix.image }}
      GHCR_REPO: ghcr.io/${{ github.repository }}/${{ matrix.image }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests-${{ matrix.image }}
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
            ${{ env.GHCR_REPO}}
          tags: |
            type=ref,event=branch
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}        

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests-${{ matrix.image }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_REPO }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.GHCR_REPO }}@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_REPO }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ${{ env.GHCR_REPO }}:${{ steps.meta.outputs.version }}      

  # build-and-push-images:
  #   runs-on: ubuntu-latest
  #   name: "Release image: ${{ matrix.image.name }}"
  #   strategy:
  #     matrix:
  #       image:
  #         - name: wapop
  #           context: .
  #         - name: network-manager
  #           context: network-manager

  #   permissions:
  #     contents: read
  #     packages: write
  #     attestations: write
  #     id-token: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: |
  #           ${{ github.repository_owner }}/${{ matrix.image.name }}
  #           ghcr.io/${{ github.repository }}/${{ matrix.image.name }}
  #         tags: |
  #           type=ref,event=branch
  #           type=sha
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}        

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       id: push
  #       with:
  #         context: ${{ matrix.image.context }}
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  release-chart:
    name: "Release chart and installer"
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: merge
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - uses: cachix/install-nix-action@v26

      - uses: cachix/cachix-action@v14
        with:
          name: devenv
      - name: Install devenv.sh
        run: nix profile install nixpkgs#devenv

      - name: Write release version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate the chart
        run: devenv shell make helm VERSION=${{ env.VERSION }}

      - name: Generate the consolidated YAML installer
        run: devenv shell make build-installer VERSION=${{ env.VERSION }}
      
      - name: Chart | Push
        uses: appany/helm-oci-chart-releaser@v0.4.2
        with:
          name: wapop-chart
          repository: ${{ github.repository_owner }}
          tag: ${{ env.VERSION }}
          path: chart
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          update_dependencies: 'true' 
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Release chart and installer ${{ env.VERSION }}"
          tagging_message: "${{ github.ref_name }}"
          push_options: '--force'
